<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[call与apply]]></title>
      <url>/2017/10/12/call%E4%B8%8Eapply/</url>
      <content type="html"><![CDATA[<h2 id="call与apply"><a href="#call与apply" class="headerlink" title="call与apply"></a>call与apply</h2><p>两者的功能大致一样</p>
<p>均是为了动态改变this，当一个object没有某个方法，但是其他的有，我们可以借助call或apply用其它对象的方法来操作。</p>
<p>具体例子如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">a,b</span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> a+b;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">sub</span>(<span class="params">a,b</span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> a*b;</div><div class="line">&#125;</div><div class="line">add.call(sub,<span class="number">3</span>,<span class="number">8</span>);</div><div class="line">add.apply(sub,[<span class="number">4</span>,<span class="number">9</span>]);</div></pre></td></tr></table></figure>
<p>sub函数中没有加法，此时利用call或者apply即可”借”到add中的加法。</p>
<p>实现对象继承的例子如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> Father = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.FamilyName = <span class="string">'Ye'</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> Son = &#123;&#125;;</div><div class="line">Father.call(Son);</div><div class="line">Father.apply(Son);</div></pre></td></tr></table></figure></p>
<p>实现多重继承的例子如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Class1</span>(<span class="params"></span>)  </span></div><div class="line"><span class="function"></span>&#123;  </div><div class="line">    <span class="keyword">this</span>.showSub = <span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)  </span></div><div class="line"><span class="function">    </span>&#123;  </div><div class="line">        <span class="built_in">console</span>.log(a-b);  </div><div class="line">    &#125;  </div><div class="line">&#125;  </div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Class2</span>(<span class="params"></span>)  </span></div><div class="line"><span class="function"></span>&#123;  </div><div class="line">    <span class="keyword">this</span>.showAdd = <span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)  </span></div><div class="line"><span class="function">    </span>&#123;  </div><div class="line">        <span class="built_in">console</span>.log(a+b);  </div><div class="line">    &#125;  </div><div class="line">&#125;  </div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Class3</span>(<span class="params"></span>)  </span></div><div class="line"><span class="function"></span>&#123;  </div><div class="line">    Class1.call(<span class="keyword">this</span>);</div><div class="line">      </div><div class="line">    Class2.call(<span class="keyword">this</span>);  </div><div class="line">&#125; </div><div class="line"><span class="keyword">var</span> result = <span class="keyword">new</span> Class3;</div><div class="line">result.showSub(<span class="number">7</span>,<span class="number">2</span>);<span class="comment">//5</span></div><div class="line">result.showAdd(<span class="number">7</span>,<span class="number">2</span>);<span class="comment">//9</span></div></pre></td></tr></table></figure></p>
<h4 id="区别-在于接受参数形式不同"><a href="#区别-在于接受参数形式不同" class="headerlink" title="区别 在于接受参数形式不同"></a><em>区别</em> 在于接受参数形式不同</h4><blockquote>
<p>call 接受连续参数</p>
<p>apply 最多两个参数，且第二个参数仅接受数组参数或者arguments对象</p>
</blockquote>
]]></content>
      
        
        <tags>
            
            <tag> Javascript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JavaScript权威指南阅读笔记]]></title>
      <url>/2017/09/30/%E8%BF%81%E7%A7%BB%E6%B5%8B%E8%AF%95/</url>
      <content type="html"><![CDATA[<h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><blockquote>
<p>HTML注释—条件注释</p>
</blockquote>
<ul>
<li>&lt;!–[if IE 6]&gt;  <kkk>如果IE版本是 6，我将被IE6浏览器显示</kkk>

</li>
</ul>
<p>&lt;![endif]–&gt;  </p>
<blockquote>
<p>js注释</p>
<ul>
<li>/<em>  </em>/ 不支持嵌套注释</li>
</ul>
</blockquote>
<h2 id="分号"><a href="#分号" class="headerlink" title="分号"></a>分号</h2><blockquote>
<p>1.return、break、continue后跟表达式不可换行</p>
<p>2.”++”等作为后缀时，不可换行。</p>
</blockquote>
<h2 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h2><blockquote>
<p>1.toFixed()是将数字转换为字符串</p>
</blockquote>
<h2 id="声明提前"><a href="#声明提前" class="headerlink" title="声明提前"></a>声明提前</h2><p><code>var k = &#39;global&#39;;
function(){
    console.log(k); //undefined
    var k = &#39;local&#39;;
    console.log(k); //local
}</code></p>
<blockquote>
<p>将变量声明提前至函数体顶部，而变量的初始化仍然留在原来的位置。</p>
</blockquote>
<p>等同于<br><code>var k = &#39;global&#39;;
function(){
    var k;
    console.log(k); //undefined
    k = &#39;local&#39;;
    console.log(k); //local
}</code></p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[关于Vue中一种简单的路由传参办法]]></title>
      <url>/2017/09/15/%E5%85%B3%E4%BA%8EVue%E4%B8%AD%E4%B8%80%E7%A7%8D%E7%AE%80%E5%8D%95%E7%9A%84%E8%B7%AF%E7%94%B1%E4%BC%A0%E5%8F%82%E5%8A%9E%E6%B3%95/</url>
      <content type="html"><![CDATA[<p><em>情景模拟</em>：</p>
<blockquote>
<p>A页面中，有一些div是根据A中的book数据通过v-for生成的，比如item。<br>并且点击会根据路由跳转到B页面。<br>而跳转到B页面后，我需要A中的item。</p>
</blockquote>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;div v-for="(item,index) in book"  :class='&#123;on:$route.path === `/$&#123;item.to&#125;/`&#125;' @click='toOther(item.to)'&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">toOther(to,run) &#123;</div><div class="line">   <span class="keyword">if</span>(<span class="keyword">this</span>.$route.path!==<span class="string">`/<span class="subst">$&#123;to&#125;</span>`</span>)&#123;</div><div class="line">     location.hash = to;</div><div class="line">   &#125;</div><div class="line">&#125;,</div></pre></td></tr></table></figure>
<p><em>解决办法</em>：</p>
<blockquote>
<p>在A中的click事件中将item传进toOther()函数中，再根据路由传入<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">toOther(to,run) &#123;</div><div class="line">      <span class="keyword">if</span>(<span class="keyword">this</span>.$route.path!==<span class="string">`/<span class="subst">$&#123;to&#125;</span>`</span>)&#123;</div><div class="line">        location.hash = to+<span class="string">'?'</span>+run.key;</div><div class="line">      &#125;</div><div class="line">    &#125;,</div></pre></td></tr></table></figure></p>
<p>即将要传的参数添加在原本url加？之后，这样既不影响路由，也比较方便。<br>                                                           如图1所示：</p>
</blockquote>
<p><img src="http://upload-images.jianshu.io/upload_images/2979086-86d879d45020551b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图1.png"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/2979086-164db17214543320.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图2.png"></p>
<blockquote>
<p>如图2，这样子我们便可以在 this.$route 的fullPath中拿到A中我们需要传递的参数了。<br>具体要拿还需要进行字符串的分割取出所需的信息，<br>但是这样子会很繁琐，<br>我们只需多加几个字，<br>在你的参数前加上’sth’=</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">toOther(to,run) &#123;</div><div class="line">      <span class="keyword">if</span>(<span class="keyword">this</span>.$route.path!==<span class="string">`/<span class="subst">$&#123;to&#125;</span>`</span>)&#123;</div><div class="line">        location.hash = to+<span class="string">'?'</span>+<span class="string">'book_key='</span>+run.key;</div><div class="line">      &#125;</div><div class="line">    &#125;,</div></pre></td></tr></table></figure>
<blockquote>
<p>你就会发现你可以在query中拿到这些个数据<br>并且是一个object的形式<br>简直不能更完美!</p>
</blockquote>
<p><img src="http://upload-images.jianshu.io/upload_images/2979086-8e3f381d4f8b0fe2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图3.png"></p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[手机号分位处理]]></title>
      <url>/2017/08/15/%E6%89%8B%E6%9C%BA%E5%8F%B7%E5%88%86%E4%BD%8D%E5%A4%84%E7%90%86/</url>
      <content type="html"><![CDATA[<blockquote>
<p>11位的手机号在用户输入时挤在一块，经常出现误删多输等情况，体验非常差。</p>
</blockquote>
<h6 id="所以为了解决这样的问题，我们通常将手机号进行分位处理，"><a href="#所以为了解决这样的问题，我们通常将手机号进行分位处理，" class="headerlink" title="所以为了解决这样的问题，我们通常将手机号进行分位处理，"></a>所以为了解决这样的问题，我们通常将手机号进行分位处理，</h6><h6 id="处理成"><a href="#处理成" class="headerlink" title="处理成"></a>处理成</h6><blockquote>
<p>#153 8113 77xx</p>
</blockquote>
<h6 id="这样的形式"><a href="#这样的形式" class="headerlink" title="这样的形式"></a>这样的形式</h6><p>下面仔细分析一下这个实现过程：</p>
<h4 id="1-首先写一个input标签"><a href="#1-首先写一个input标签" class="headerlink" title="1. 首先写一个input标签"></a>1. 首先写一个input标签</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;input id=&quot;mobilePhone&quot;  placeholder=&quot;请输入您的手机号&quot; maxlength=&quot;13&quot; @keyup=&quot;phonenoSpace()&quot;&gt;</div></pre></td></tr></table></figure>
<p>实现如图所示的一个输入框:</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2979086-a6a9b369b3c0a6e3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
<h4 id="2-我们监听keyup事件，绑定一个phonenoSpace-的函数"><a href="#2-我们监听keyup事件，绑定一个phonenoSpace-的函数" class="headerlink" title="2. 我们监听keyup事件，绑定一个phonenoSpace()的函数"></a>2. 我们监听keyup事件，绑定一个phonenoSpace()的函数</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">phonenoSpace()&#123;</div><div class="line">  <span class="keyword">let</span> phoneNumber = <span class="built_in">document</span>.getElementById(<span class="string">'mobilePhone'</span>)</div><div class="line">  <span class="comment">//获取这个input的DOM元素</span></div><div class="line">  <span class="keyword">let</span> phoneNumberv = phoneNumber.value</div><div class="line">  <span class="comment">//phoneNumberv为输入框中的值</span></div><div class="line">  <span class="keyword">let</span> newNum = <span class="number">0</span></div><div class="line">  <span class="comment">//再定义一个中间元素</span></div><div class="line">  <span class="keyword">if</span>(phoneNumberv.length==<span class="number">3</span> || phoneNumberv.length==<span class="number">8</span>)&#123;</div><div class="line">    newNum = phoneNumberv + <span class="string">' '</span></div><div class="line">    phoneNumber.value = newNum;<span class="comment">//加空格后</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>只需要判断当输完第三位以及第八位时追加一个空格即可，<br>到这步为止，我们已经可以实现输入时实现分位的功能：</p>
</blockquote>
<p><img src="http://upload-images.jianshu.io/upload_images/2979086-7c5d3bcf7d8dfd62.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
<h3 id="但是，当我们删除号码时，问题就来了"><a href="#但是，当我们删除号码时，问题就来了" class="headerlink" title="但是，当我们删除号码时，问题就来了"></a>但是，当我们删除号码时，问题就来了</h3><blockquote>
<p>我们实现分位的逻辑时判断input中值的长度为3与8时自动追加一个空格。<br>当我们回删时，删到只剩第8位和第3位，<br>与此同时，我们写的函数立马又加上一个空格，<br>我们删掉一个，它又加上一个。<br> 一直反复，除非我们长按退格键，仅触发一次keyup时间，这样子用户体验太差。</p>
</blockquote>
<h4 id="3-在data里写一个全局的spaceflag，初始值为0"><a href="#3-在data里写一个全局的spaceflag，初始值为0" class="headerlink" title="3. 在data里写一个全局的spaceflag，初始值为0"></a>3. 在data里写一个全局的spaceflag，初始值为0</h4><blockquote>
<p>当输入号码时，判断值长度与spaceflag的大小<br>在追加空格后 ，令<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">this</span>.spaceflag = phoneNumberv.length</div></pre></td></tr></table></figure></p>
<p>只需要phoneNumberv.length&lt;this.spaceflag，此时说明我们在执行删除操作<br>此时判断在第9位和第4位时自动将空格删除即可<br>再将 this.spaceflag 置为 phoneNumberv.length</p>
<h4 id="4-对input中的值进行去空格处理"><a href="#4-对input中的值进行去空格处理" class="headerlink" title="4. 对input中的值进行去空格处理"></a>4. 对input中的值进行去空格处理</h4><p>我们还需要对手机号进行正则判断，<br>对input中的值进行去空格处理<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">this</span>.phonennowithoutSpace = phoneNumberv.replace(<span class="regexp">/\s+/g</span>,<span class="string">""</span>);</div></pre></td></tr></table></figure></p>
</blockquote>
<p>在之后的判断中均以phonennowithoutSpace来判断即可。</p>
<p>完整代码如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">phonenoSpace()&#123;</div><div class="line">  <span class="comment">//输入手机号时实现分位空格</span></div><div class="line">    <span class="keyword">let</span> phoneNumber = <span class="built_in">document</span>.getElementById(<span class="string">'mobilePhone'</span>)</div><div class="line">    <span class="keyword">let</span> phoneNumberv = phoneNumber.value</div><div class="line">    <span class="keyword">let</span> newNum = <span class="number">0</span></div><div class="line">    <span class="keyword">if</span>(phoneNumberv.length&gt;<span class="keyword">this</span>.spaceflag)&#123;</div><div class="line">      <span class="keyword">if</span>(phoneNumberv.length==<span class="number">3</span> || phoneNumberv.length==<span class="number">8</span>)&#123;</div><div class="line">        newNum = phoneNumberv + <span class="string">' '</span></div><div class="line">        phoneNumber.value = newNum;<span class="comment">//加空格后</span></div><div class="line">      &#125;</div><div class="line">      <span class="keyword">this</span>.spaceflag = phoneNumberv.length</div><div class="line">    &#125;</div><div class="line">      <span class="keyword">else</span> <span class="keyword">if</span> (phoneNumberv.length&lt;<span class="keyword">this</span>.spaceflag)&#123;</div><div class="line">        <span class="comment">//回删手机号时删除空格</span></div><div class="line">        <span class="keyword">if</span>(phoneNumberv.length==<span class="number">4</span> || phoneNumberv.length==<span class="number">9</span>)&#123;</div><div class="line">          phoneNumberv = phoneNumberv.substring(<span class="number">0</span>,phoneNumberv.length<span class="number">-1</span>)</div><div class="line">          newNum = phoneNumberv</div><div class="line">          phoneNumber.value = newNum;<span class="comment">//删除空格后</span></div><div class="line">        &#125;</div><div class="line">        <span class="keyword">this</span>.spaceflag = phoneNumberv.length</div><div class="line">      &#125;</div><div class="line">     <span class="keyword">this</span>.phonennowithoutSpace = phoneNumberv.replace(<span class="regexp">/\s+/g</span>,<span class="string">""</span>);<span class="comment">//去除空格方法</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[第一篇（测试用）]]></title>
      <url>/2017/08/15/hello-world/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
      
        
    </entry>
    
  
  
</search>
